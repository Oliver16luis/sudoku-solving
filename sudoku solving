#include <iostream>
#include <vector>
using namespace std;

#define N 9

// Function to check if it's safe to place a number in a cell
bool isSafe(vector<vector<int>>& board, int row, int col, int num) {
    // Check if the number is not in the current row or column
    for (int x = 0; x < N; x++) {
        if (board[row][x] == num || board[x][col] == num) {
            return false;
        }
    }

    // Check if the number is not in the 3x3 subgrid
    int startRow = row - row % 3;
    int startCol = col - col % 3;
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            if (board[i + startRow][j + startCol] == num) {
                return false;
            }
        }
    }

    return true;
}

// Function to solve the Sudoku board using backtracking
bool solveSudoku(vector<vector<int>>& board, int row, int col) {
    // If we have reached the last cell, return true
    if (row == N - 1 && col == N) {
        return true;
    }

    // Move to the next row if we're at the end of a row
    if (col == N) {
        row++;
        col = 0;
    }

    // If the cell is already filled, move to the next cell
    if (board[row][col] != 0) {
        return solveSudoku(board, row, col + 1);
    }

    // Try placing numbers 1 to 9 in the empty cell
    for (int num = 1; num <= 9; num++) {
        // Check if placing num in board[row][col] is safe
        if (isSafe(board, row, col, num)) {
            board[row][col] = num;

            // Recurse to solve the next cell
            if (solveSudoku(board, row, col + 1)) {
                return true;
            }

            // Backtrack by removing num if it doesn't lead to a solution
            board[row][col] = 0;
        }
    }

    return false;
}

// Function to print the Sudoku board
void printBoard(const vector<vector<int>>& board) {
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            cout << board[i][j] << " ";
        }
        cout << endl;
    }
}

// Function to take user input for the Sudoku board
void inputBoard(vector<vector<int>>& board) {
    cout << "Enter the Sudoku board (use 0 for empty cells):\n";
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            cout << "Enter value for cell (" << i + 1 << ", " << j + 1 << "): ";
            cin >> board[i][j];
            while (board[i][j] < 0 || board[i][j] > 9) { // Ensure valid input
                cout << "Invalid input. Please enter a number between 0 and 9: ";
                cin >> board[i][j];
            }
        }
    }
}

int main() {
    vector<vector<int>> board(N, vector<int>(N, 0));  // 9x9 board initialized to 0

    // Take user input for the board
    inputBoard(board);

    cout << "\nInitial Board:\n";
    printBoard(board);

    if (solveSudoku(board, 0, 0)) {
        cout << "\nSolved Sudoku Board:\n";
        printBoard(board);
    } else {
        cout << "No solution exists for the given Sudoku board." << endl;
    }

    return 0;
}
